namespace: "argocd-test"
installCRDs: false

workload:
  replicaCount: 1
  image:
    registry: quay.io
    repository: argoproj/argocd
    tag: v2.14.2
  command:
    - /usr/local/bin/argocd-server
  args:
    - '--port=8080'
    - '--metrics-port=8083'
  probes:
    readinessProbe:
      type: httpGet
      path: "/healthz"
      port: 8080
      scheme: "HTTP"
      periodSeconds: 10
      timeoutSeconds: 5
      successThreshold: 1
      failureThreshold: 3
      initialDelaySeconds: 15
    livenessProbe:
      type: httpGet
      path: "/healthz?full=true"
      port: 8080
      scheme: "HTTP"
      periodSeconds: 10
      timeoutSeconds: 5
      successThreshold: 1
      failureThreshold: 3
      initialDelaySeconds: 15
  resources:
    preset: nano
  storage:
    - mountPath: /tmp
      name: tmp
      ramDisk: false
      readOnly: false
      type: emptyDir

autoscaling:
  enabled: false

service:
  ports:
    - name: http
      port: 8080
      protocol: TCP
    - name: http-metrics
      port: 8083
      protocol: TCP

configMap:
  enabled: true
  configMaps:
    - name: "argocd-cm"
      data:
        admin.enabled: 'true'
        application.instanceLabelKey: argocd.argoproj.io/instance
        application.sync.impersonation.enabled: 'false'
        exec.enabled: 'false'
        resource.customizations: |
          networking.k8s.io/Ingress:
            health.lua: |
              hs = {}
              hs.status = "Healthy"
              return hs
        server.rbac.log.enforce.enable: 'false'
        statusbadge.enabled: 'false'
        timeout.hard.reconciliation: 0s
        timeout.reconciliation: 180s
        url: https://argocd.example.com

rbac:
  enabled: true
  roles:
    role:
      rules:
        - apiGroups:
          - ""
          resources:
          - secrets
          - configmaps
          verbs:
          - create
          - get
          - list
          - watch
          - update
          - patch
          - delete
        - apiGroups:
          - argoproj.io
          resources:
          - applications
          - appprojects
          - applicationsets
          verbs:
          - create
          - get
          - list
          - watch
          - update
          - delete
          - patch
        - apiGroups:
          - ""
          resources:
          - events
          verbs:
          - create
          - list
    clusterRole:
      rules:
        - apiGroups:
          - '*'
          resources:
          - '*'
          verbs:
          - delete
          - get
          - patch
        - apiGroups:
          - ""
          resources:
          - events
          verbs:
          - list
        - apiGroups:
          - ""
          resources:
          - pods
          - pods/log
          verbs:
          - get
        - apiGroups:
          - argoproj.io
          resources:
          - applications
          - applicationsets
          verbs:
          - get
          - list
          - watch
        - apiGroups:
          - batch
          resources:
          - jobs
          verbs:
          - create
        - apiGroups:
          - argoproj.io
          resources:
          - workflows
          verbs:
          - create
