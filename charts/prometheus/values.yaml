namespace: "thanos"

workload:
  type: StatefulSet
  image:
    registry: quay.io
    repository: prometheus/prometheus
    tag: v3.1.0
  args:
    - '--config.file=/etc/config/prometheus.yaml'
    - '--web.console.libraries=/etc/prometheus/console_libraries'
    - '--web.console.templates=/etc/prometheus/consoles'
    - '--web.enable-lifecycle'
    - '--web.enable-admin-api'
    - "--storage.tsdb.no-lockfile"
    - "--storage.tsdb.min-block-duration=2h"
    - "--storage.tsdb.max-block-duration=2h"
    - '--storage.tsdb.path=/prometheus'
  probes:
    readinessProbe:
      path: "/-/ready"
      port: 9090
    livenessProbe:
      path: "/-/healthy"
      port: 9090
  storage:
    - configMapName: prometheus
      mountPath: /etc/config
      name: config
      type: configMap
    - mountPath: /prometheus
      name: prometheus-data
      ramDisk: false
      readOnly: false
      sizeLimit: 5Gi
      type: emptyDir
  extraContainers:
    - name: thanos
      image: "quay.io/thanos/thanos:v0.31.0"
      ports:
        - containerPort: 10901
        - containerPort: 10902
      args:
        - 'sidecar'
        - '--objstore.config-file=/etc/config/thanos.yaml'
        - '--tsdb.path=/prometheus'
        - '--prometheus.url=http://localhost:9090'
      readinessProbe:
        failureThreshold: 3
        httpGet:
          path: /-/ready
          port: 10902
          scheme: HTTP
        initialDelaySeconds: 15
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 5
      livenessProbe:
        failureThreshold: 3
        httpGet:
          path: /-/healthy
          port: 10902
          scheme: HTTP
        initialDelaySeconds: 15
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 5
      volumeMounts:
        - name: prometheus-data
          mountPath: /prometheus
        - name: config
          mountPath: /etc/config

autoscaling:
  enabled: false

service:
  clusterIP: "None"
  ports:
    - name: http
      port: 9090
      protocol: TCP
    - name: grpc
      port: 10901
      protocol: TCP

configMap:
  enabled: true
  configMaps:
    - name: "prometheus"
      data:
        prometheus.yaml: |
          global:
            scrape_interval: 5s
            evaluation_interval: 5s
            external_labels:
              cluster: prometheus-ha
              replica: ${POD_NAME}

          scrape_configs:
            # Scraper for Kubernetes services with HTTP metrics
            - job_name: 'kube-http-services'
              kubernetes_sd_configs:
                - role: endpoints
              relabel_configs:
                - source_labels: [__meta_kubernetes_endpoint_port_name]
                  regex: http-metrics
                  action: keep
                - source_labels: [__meta_kubernetes_namespace, __meta_kubernetes_service_name]
                  target_label: service
                  separator: /
                  replacement: $1/$2
                - source_labels: [__meta_kubernetes_pod_node_name]
                  target_label: instance
                - action: labeldrop
                  regex: __meta_kubernetes.*

            # Scraper for Kubernetes services with HTTPS metrics
            - job_name: 'kube-https-services'
              scheme: https
              tls_config:
                insecure_skip_verify: true
              kubernetes_sd_configs:
                - role: endpoints
              relabel_configs:
                - source_labels: [__meta_kubernetes_endpoint_port_name]
                  regex: https-metrics
                  action: keep
                - source_labels: [__meta_kubernetes_namespace, __meta_kubernetes_service_name]
                  target_label: service
                  separator: /
                  replacement: $1/$2
                - source_labels: [__meta_kubernetes_pod_node_name]
                  target_label: instance
                - action: labeldrop
                  regex: __meta_kubernetes.*

            # Scraper for kubernetes api server
            - job_name: "kube-apiserver"
              scheme: https
              metrics_path: /metrics
              authorization:
                type: Bearer
                credentials_file: /var/run/secrets/kubernetes.io/serviceaccount/token
              tls_config:
                ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
              kubernetes_sd_configs:
                - role: node
              relabel_configs:
                - source_labels: [__meta_kubernetes_node_name]
                  regex: .*controlplane.*
                  action: keep
                - source_labels: [__meta_kubernetes_node_address_InternalIP]
                  regex: (.+)
                  replacement: ${1}:6443
                  target_label: __address__
                - source_labels: [__meta_kubernetes_node_name]
                  target_label: instance

            # Scraper for kubernetes proxy
            - job_name: "kube-proxy"
              scheme: http
              metrics_path: /metrics
              kubernetes_sd_configs:
                - role: node
              relabel_configs:
                - source_labels: [__meta_kubernetes_node_address_InternalIP]
                  regex: (.+)
                  replacement: ${1}:10249
                  target_label: __address__
                - source_labels: [__meta_kubernetes_node_name]
                  target_label: instance

            # Scraper for kubernetes controller manager
            - job_name: "kube-controller-manager"
              scheme: https
              metrics_path: /metrics
              authorization:
                type: Bearer
                credentials_file: /var/run/secrets/kubernetes.io/serviceaccount/token
              tls_config:
                ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
                insecure_skip_verify: true
              kubernetes_sd_configs:
                - role: node
              relabel_configs:
                - source_labels: [__meta_kubernetes_node_name]
                  regex: .*controlplane.*
                  action: keep
                - source_labels: [__meta_kubernetes_node_address_InternalIP]
                  regex: (.+)
                  replacement: ${1}:10257
                  target_label: __address__
                - source_labels: [__meta_kubernetes_node_name]
                  target_label: instance

            # Scraper for kubernetes scheduler
            - job_name: "kube-scheduler"
              scheme: https
              metrics_path: /metrics
              authorization:
                type: Bearer
                credentials_file: /var/run/secrets/kubernetes.io/serviceaccount/token
              tls_config:
                ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
                insecure_skip_verify: true
              kubernetes_sd_configs:
                - role: node
              relabel_configs:
                - source_labels: [__meta_kubernetes_node_name]
                  regex: .*controlplane.*
                  action: keep
                - source_labels: [__meta_kubernetes_node_address_InternalIP]
                  regex: (.+)
                  replacement: ${1}:10259
                  target_label: __address__
                - source_labels: [__meta_kubernetes_node_name]
                  target_label: instance

            # Scraper for cadvisor
            - job_name: "kube-cadvisor"
              scheme: https
              metrics_path: /metrics/cadvisor
              authorization:
                type: Bearer
                credentials_file: /var/run/secrets/kubernetes.io/serviceaccount/token
              tls_config:
                ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
                insecure_skip_verify: true
              kubernetes_sd_configs:
                - role: node
              relabel_configs:
                - action: labelmap
                  regex: __meta_kubernetes_node_label_(.+)

            # Scraper for kubernetes etcd cluster
            - job_name: "etcd"
              scheme: http
              metrics_path: /metrics
              kubernetes_sd_configs:
                - role: node
              relabel_configs:
                - source_labels: [__meta_kubernetes_node_name]
                  regex: .*controlplane.*
                  action: keep
                - source_labels: [__meta_kubernetes_node_address_InternalIP]
                  regex: (.+)
                  replacement: ${1}:2381
                  target_label: __address__
                - source_labels: [__meta_kubernetes_node_name]
                  target_label: instance

            # Scraper for containerd
            - job_name: "containerd"
              scheme: http
              metrics_path: /v1/metrics
              kubernetes_sd_configs:
                - role: node
              relabel_configs:
                - source_labels: [__meta_kubernetes_node_address_InternalIP]
                  regex: (.+)
                  replacement: ${1}:11234
                  target_label: __address__
                - source_labels: [__meta_kubernetes_node_name]
                  target_label: instance
        thanos.yaml: |
          type: FILESYSTEM
          config:
            directory: "/data"

rbac:
  enabled: true
  roles:
    clusterRole:
      rules:
        - apiGroups:
            - ''
          resources:
            - nodes
            - nodes/proxy
            - nodes/metrics
            - services
            - endpoints
            - pods
            - ingresses
            - configmaps
          verbs:
            - get
            - list
            - watch
        - apiGroups:
            - extensions
            - networking.k8s.io
          resources:
            - ingresses/status
            - ingresses
          verbs:
            - get
            - list
            - watch
        - apiGroups:
            - discovery.k8s.io
          resources:
            - endpointslices
          verbs:
            - get
            - list
            - watch
        - nonResourceURLs:
            - /metrics
          verbs:
            - get

ingress:
  enabled: true
  annotations:
    traefik.ingress.kubernetes.io/router.entrypoints: "internalweb, internalwebsecure"
  hosts:
    - host: prometheus.openjamlab.com
      path: /
      pathType: "Prefix"
      tls:
        enabled: true
        secretName: "letsencrypt-wildcard-certificate"
      backend:
        service:
          name: "prometheus"
          port: 9090
