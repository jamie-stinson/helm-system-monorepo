namespace: "thanos"
# autoPatching:
#   enabled: true
#   annotations:
#     argocd-image-updater.argoproj.io/image-list: "prometheus=quay.io/prometheus/prometheus:~v3, thanos=quay.io/thanos/thanos:~v0"
#     argocd-image-updater.argoproj.io/thanos.force-update: "true"
#     argocd-image-updater.argoproj.io/thanos.helm.image-spec: "workload.extraContainers[0].image"
#     argocd-image-updater.argoproj.io/thanos.update-strategy: "semver"
workload:
  type: StatefulSet
  image:
    repository: quay.io/prometheus/prometheus
    tag: v3.4.2
  args:
  - '--config.file=/etc/config/prometheus.yaml'
  - '--web.console.libraries=/etc/prometheus/console_libraries'
  - '--web.console.templates=/etc/prometheus/consoles'
  - '--web.enable-lifecycle'
  - '--web.enable-admin-api'
  - "--storage.tsdb.no-lockfile"
  - "--storage.tsdb.min-block-duration=2h"
  - "--storage.tsdb.max-block-duration=2h"
  - '--storage.tsdb.path=/prometheus'
  envsSecret:
  - name: OBJSTORE_CONFIG
    secret: thanos
    key: thanos.yaml
  resources:
    preset: ""
    custom:
      requests:
        cpu: "10m"
        memory: "4Gi"
        ephemeral-storage: "16Mi"
      limits:
        memory: "4Gi"
        ephemeral-storage: "16Mi"
  probes:
    readinessProbe:
      path: "/-/ready"
      port: 9090
    livenessProbe:
      path: "/-/healthy"
      port: 9090
  storage:
  - name: config
    type: configMap
    mountPath: /etc/config
    configMapName: prometheus
  - name: prometheus-data
    type: pvcTemplate
    mountPath: /prometheus
    accessModes:
    - "ReadWriteOnce"
    storageClass: "openebs"
    size: "25Gi"
    readOnly: false
  extraContainers:
  - name: thanos
    image: "quay.io/thanos/thanos:v0.38.0"
    ports:
    - containerPort: 9091
      name: grpc
      protocol: TCP
    - containerPort: 10902
      name: http
      protocol: TCP
    env:
    - name: OBJSTORE_CONFIG
      valueFrom:
        secretKeyRef:
          key: thanos.yaml
          name: thanos
    securityContext:
      allowPrivilegeEscalation: false
      capabilities:
        drop:
        - ALL
      privileged: false
      readOnlyRootFilesystem: true
      runAsGroup: 1000
      runAsNonRoot: true
      runAsUser: 1000
      seccompProfile:
        type: RuntimeDefault
    args:
    - 'sidecar'
    - '--objstore.config=$(OBJSTORE_CONFIG)'
    - '--tsdb.path=/prometheus'
    - '--prometheus.url=http://localhost:9090'
    readinessProbe:
      failureThreshold: 3
      httpGet:
        path: /-/ready
        port: 10902
        scheme: HTTP
      initialDelaySeconds: 15
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 5
    livenessProbe:
      failureThreshold: 3
      httpGet:
        path: /-/healthy
        port: 10902
        scheme: HTTP
      initialDelaySeconds: 15
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 5
    volumeMounts:
    - name: config
      mountPath: /etc/config
    - name: prometheus-data
      mountPath: /prometheus
service:
  clusterIP: "None"
  ports:
  - name: http
    port: 9090
    protocol: TCP
  - name: grpc
    port: 10901
    protocol: TCP
configMap:
  enabled: true
  configMaps:
  - name: "prometheus"
    data:
      prometheus.yaml: |
        global:
          scrape_interval: 5s
          evaluation_interval: 5s
          external_labels:
            cluster: prometheus-ha
            replica: ${POD_NAME}

        scrape_configs:
          # Scraper for Kubernetes services with HTTP metrics
          - job_name: 'kube-http-services'
            kubernetes_sd_configs:
              - role: endpoints
            relabel_configs:
              - source_labels: [__meta_kubernetes_endpoint_port_name]
                regex: http-metrics
                action: keep
              - source_labels: [__meta_kubernetes_namespace, __meta_kubernetes_service_name]
                target_label: service
                separator: /
                replacement: $1/$2
              - source_labels: [__meta_kubernetes_pod_node_name]
                target_label: instance
              - action: labeldrop
                regex: __meta_kubernetes.*

          # Scraper for Kubernetes services with HTTPS metrics
          - job_name: 'kube-https-services'
            scheme: https
            tls_config:
              insecure_skip_verify: true
            kubernetes_sd_configs:
              - role: endpoints
            relabel_configs:
              - source_labels: [__meta_kubernetes_endpoint_port_name]
                regex: https-metrics
                action: keep
              - source_labels: [__meta_kubernetes_namespace, __meta_kubernetes_service_name]
                target_label: service
                separator: /
                replacement: $1/$2
              - source_labels: [__meta_kubernetes_pod_node_name]
                target_label: instance
              - action: labeldrop
                regex: __meta_kubernetes.*

          # Scraper for kubernetes api server
          - job_name: "kube-apiserver"
            scheme: https
            metrics_path: /metrics
            authorization:
              type: Bearer
              credentials_file: /var/run/secrets/kubernetes.io/serviceaccount/token
            tls_config:
              ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
            kubernetes_sd_configs:
              - role: node
            relabel_configs:
              - source_labels: [__meta_kubernetes_node_name]
                regex: .*controlplane.*
                action: keep
              - source_labels: [__meta_kubernetes_node_address_InternalIP]
                regex: (.+)
                replacement: ${1}:6443
                target_label: __address__
              - source_labels: [__meta_kubernetes_node_name]
                target_label: instance

          # Scraper for kubernetes proxy
          - job_name: "kube-proxy"
            scheme: http
            metrics_path: /metrics
            kubernetes_sd_configs:
              - role: node
            relabel_configs:
              - source_labels: [__meta_kubernetes_node_address_InternalIP]
                regex: (.+)
                replacement: ${1}:10249
                target_label: __address__
              - source_labels: [__meta_kubernetes_node_name]
                target_label: instance

          # Scraper for kubernetes controller manager
          - job_name: "kube-controller-manager"
            scheme: https
            metrics_path: /metrics
            authorization:
              type: Bearer
              credentials_file: /var/run/secrets/kubernetes.io/serviceaccount/token
            tls_config:
              ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
              insecure_skip_verify: true
            kubernetes_sd_configs:
              - role: node
            relabel_configs:
              - source_labels: [__meta_kubernetes_node_name]
                regex: .*controlplane.*
                action: keep
              - source_labels: [__meta_kubernetes_node_address_InternalIP]
                regex: (.+)
                replacement: ${1}:10257
                target_label: __address__
              - source_labels: [__meta_kubernetes_node_name]
                target_label: instance

          # Scraper for kubernetes scheduler
          - job_name: "kube-scheduler"
            scheme: https
            metrics_path: /metrics
            authorization:
              type: Bearer
              credentials_file: /var/run/secrets/kubernetes.io/serviceaccount/token
            tls_config:
              ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
              insecure_skip_verify: true
            kubernetes_sd_configs:
              - role: node
            relabel_configs:
              - source_labels: [__meta_kubernetes_node_name]
                regex: .*controlplane.*
                action: keep
              - source_labels: [__meta_kubernetes_node_address_InternalIP]
                regex: (.+)
                replacement: ${1}:10259
                target_label: __address__
              - source_labels: [__meta_kubernetes_node_name]
                target_label: instance

          # Scraper for cadvisor
          - job_name: "kube-cadvisor"
            scheme: https
            metrics_path: /metrics/cadvisor
            authorization:
              type: Bearer
              credentials_file: /var/run/secrets/kubernetes.io/serviceaccount/token
            tls_config:
              ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
              insecure_skip_verify: true
            kubernetes_sd_configs:
              - role: node
            relabel_configs:
              - action: labelmap
                regex: __meta_kubernetes_node_label_(.+)

          # Kubelet
          - job_name: "kubelet"
            scheme: https
            metrics_path: /metrics
            authorization:
              type: Bearer
              credentials_file: /var/run/secrets/kubernetes.io/serviceaccount/token
            tls_config:
              ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
              insecure_skip_verify: true
            kubernetes_sd_configs:
              - role: node
            relabel_configs:
              - action: labelmap
                regex: __meta_kubernetes_node_label_(.+)

          # Scraper for kubernetes etcd cluster
          - job_name: "etcd"
            scheme: http
            metrics_path: /metrics
            kubernetes_sd_configs:
              - role: node
            relabel_configs:
              - source_labels: [__meta_kubernetes_node_name]
                regex: .*controlplane.*
                action: keep
              - source_labels: [__meta_kubernetes_node_address_InternalIP]
                regex: (.+)
                replacement: ${1}:2381
                target_label: __address__
              - source_labels: [__meta_kubernetes_node_name]
                target_label: instance

          # Scraper for containerd
          - job_name: "containerd"
            scheme: http
            metrics_path: /v1/metrics
            kubernetes_sd_configs:
              - role: node
            relabel_configs:
              - source_labels: [__meta_kubernetes_node_address_InternalIP]
                regex: (.+)
                replacement: ${1}:11234
                target_label: __address__
              - source_labels: [__meta_kubernetes_node_name]
                target_label: instance

          # Solution to monitor NFS usage
          - job_name: 'directory-size-exporter'
            static_configs:
              - targets: ['10.0.0.10:8000']
rbac:
  enabled: true
  roles:
    clusterRole:
      rules:
      - apiGroups:
        - ''
        resources:
        - nodes
        - nodes/proxy
        - nodes/metrics
        - services
        - endpoints
        - pods
        - ingresses
        - configmaps
        verbs:
        - get
        - list
        - watch
      - apiGroups:
        - extensions
        - networking.k8s.io
        resources:
        - ingresses/status
        - ingresses
        verbs:
        - get
        - list
        - watch
      - apiGroups:
        - discovery.k8s.io
        resources:
        - endpointslices
        verbs:
        - get
        - list
        - watch
      - nonResourceURLs:
        - /metrics
        verbs:
        - get
ingress:
  enabled: true
  annotations:
    traefik.ingress.kubernetes.io/router.entrypoints: "internalweb, internalwebsecure"
  hosts:
  - host: prometheus.projectwhitebox.com
    path: /
    pathType: "Prefix"
    tls:
      enabled: false
    backend:
      service:
        name: "prometheus"
        port: 9090
extraObjects:
- |
  apiVersion: bitnami.com/v1alpha1
  kind: SealedSecret
  metadata:
    name: thanos
    namespace: thanos
  spec:
    encryptedData:
      thanos.yaml: AgBd9tPYrPuzWP4JjAIeIdc4L8GRmXxc/RPkKeieVzjXUnxbdrLZY7RrEWagTOaIspC93X0X5/uihQwDfgrrKLu/rh5vk1uM2z/nlPRBR2/E1VgKH5NN6fhk0Fsq054gVcMizLRIu6u0L7I8l0rmqe5OdKrIS14PTBfhRCw/enIQvH1VdGQ3b1SVPrJf/TANPnfAawAkYT5+lhFvTMXLuOIzmP58aA+QFbTT3Xo4L7Q9tz2crmRCk0YioNZvLYGC+R716Jgl/ojRbU874zmEhttFOXImsPqlHCbSclGBKelggvROcUMqUMZVmcFwSIvIcTfe+Da3XBYHTghbfNQWge/nav8iBNrhk6mdwrlDLmUjo/Dl9f+nZO2qZU58UuMKHnlxVZCKcnzUmDEPpzdS+MGCT+fl/DCAAR+Jkrkm1VziXj8lnNNoR7RCPBEIbvuVebNsvvjO7VD1/yiGfQlqXmanIvTgFzZcK943Afl8sLDLhgcZArnjOM0HL7g/4FpQWdtYF4HYxjZ2kqI9PDg1GvyN8uJYX/J79cO16GhuwFWGctXd36plwvc2DD1XvU5v13qaIhGdyes8XNsM9f5AjfFgWngaLKLEsLEU4UhyXnCgP083z3Sdr+1FcRnuHBzCem0OmiuLgp01j7akxnHYXIO3H1nla7ktElgLHNeBeixQRNcSyfD7PCMv7alTnjJknlPYaBVHl/4C6oCV4r3IfBtrNMgl5MNDOg0eeiEKAVkxmP1UzFlf3pB8YP8OHNpa9PFmVGUjftzPaL9Pz1w+ZhhK/xx+J2R5s5JVcuLECOR69Ir65stlK0B4h45A+tKZEuHFLYNPlNL0EPKRsIkDMq1WYZMFOluVkB5sYUv0RAh+k13Cw/3iTnjds84VE9vi1SRJ+KDT3jm2x0iy8S6DAwKPyWW/HutSr9Ne6zjUEv1AHXV32l2h7vg=
    template:
      metadata:
        name: thanos
        namespace: thanos
      type: Opaque
