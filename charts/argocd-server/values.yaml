namespace: "argocd"
installCRDs: true

workload:
  image:
    registry: quay.io
    repository: argoproj/argocd
    tag: v2.14.2
  args:
    - /usr/local/bin/argocd-server
    - '--port'
    - '8080'
    - '--metrics-port'
    - '8083'
    - '--repo-server'
    - argocd-repo-server:8081
    - '--logformat'
    - text
    - '--loglevel'
    - info
    - '--redis'
    - argocd-redis:6379
  envs:
    - name: ARGOCD_SERVER_NAME
      value: argocd-server
  envsSecret:
    - name: REDIS_PASSWORD
      secret: argocd-redis
      key: auth
  resources:
    preset: micro
  probes:
    readinessProbe:
      type: httpGet
      path: "/healthz"
      port: 8080
      scheme: "HTTP"
    livenessProbe:
      type: httpGet
      path: "/healthz?full=true"
      port: 8080
      scheme: "HTTP"
  storage:
    - name: tmp
      type: emptyDir
      mountPath: /tmp
      ramDisk: false
      readOnly: false

service:
  ports:
    - name: http
      port: 8080
      protocol: TCP
    - name: http-metrics
      port: 8083
      protocol: TCP

rbac:
  enabled: true
  roles:
    role:
      rules:
        - apiGroups:
            - ''
          resources:
            - secrets
            - configmaps
          verbs:
            - create
            - get
            - list
            - watch
            - update
            - patch
            - delete
        - apiGroups:
            - argoproj.io
          resources:
            - applications
            - applicationsets
            - appprojects
          verbs:
            - create
            - get
            - list
            - watch
            - update
            - delete
            - patch
        - apiGroups:
            - ''
          resources:
            - events
          verbs:
            - create
            - list
    clusterRole:
      rules:
        - apiGroups:
            - '*'
          resources:
            - '*'
          verbs:
            - delete
            - get
            - patch
        - apiGroups:
            - ''
          resources:
            - events
          verbs:
            - list
            - create
        - apiGroups:
            - ''
          resources:
            - pods
            - pods/log
          verbs:
            - get
        - apiGroups:
            - argoproj.io
          resources:
            - applications
            - applicationsets
          verbs:
            - get
            - list
            - update
            - watch
        - apiGroups:
            - batch
          resources:
            - jobs
          verbs:
            - create
        - apiGroups:
            - argoproj.io
          resources:
            - workflows
          verbs:
            - create

extraObjects:
  - |
    apiVersion: v1
    kind: ConfigMap
    metadata:
      name: argocd-cm
      labels:
        app.kubernetes.io/name: argocd-cm
        app.kubernetes.io/part-of: argocd
    data:
      admin.enabled: 'true'
      application.instanceLabelKey: argocd.argoproj.io/instance
      application.sync.impersonation.enabled: 'false'
      exec.enabled: 'false'
      resource.customizations: |
        networking.k8s.io/Ingress:
          health.lua: |
            hs = {}
            hs.status = "Healthy"
            return hs
      server.rbac.log.enforce.enable: 'false'
      statusbadge.enabled: 'false'
      timeout.hard.reconciliation: 0s
      timeout.reconciliation: 180s
      url: https://argocd.example.com
  - |
    apiVersion: v1
    kind: ConfigMap
    metadata:
      name: argocd-rbac-cm
      labels:
        app.kubernetes.io/name: argocd-rbac-cm
        app.kubernetes.io/part-of: argocd
    data:
      policy.csv: ''
      policy.default: ''
      policy.matchMode: glob
      scopes: '[groups]'
  - |
    apiVersion: v1
    kind: ConfigMap
    metadata:
      name: argocd-ssh-known-hosts-cm
      labels:
        app.kubernetes.io/name: argocd-ssh-known-hosts-cm
        app.kubernetes.io/part-of: argocd
    data:
      ssh_known_hosts: >
        [ssh.github.com]:443 ecdsa-sha2-nistp256
        AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBEmKSENjQEezOmxkZMy7opKgwFB9nkt5YRrYMjNuG5N87uRgg6CLrbo5wAdT/y6v0mKV0U2w0WZ2YB/++Tpockg=

        [ssh.github.com]:443 ssh-ed25519
        AAAAC3NzaC1lZDI1NTE5AAAAIOMqqnkVzrm0SdG6UOoqKLsabgH5C9okWi0dh2l9GKJl

        [ssh.github.com]:443 ssh-rsa
        AAAAB3NzaC1yc2EAAAADAQABAAABgQCj7ndNxQowgcQnjshcLrqPEiiphnt+VTTvDP6mHBL9j1aNUkY4Ue1gvwnGLVlOhGeYrnZaMgRK6+PKCUXaDbC7qtbW8gIkhL7aGCsOr/C56SJMy/BCZfxd1nWzAOxSDPgVsmerOBYfNqltV9/hWCqBywINIR+5dIg6JTJ72pcEpEjcYgXkE2YEFXV1JHnsKgbLWNlhScqb2UmyRkQyytRLtL+38TGxkxCflmO+5Z8CSSNY7GidjMIZ7Q4zMjA2n1nGrlTDkzwDCsw+wqFPGQA179cnfGWOWRVruj16z6XyvxvjJwbz0wQZ75XK5tKSb7FNyeIEs4TT4jk+S4dhPeAUC5y+bDYirYgM4GC7uEnztnZyaVWQ7B381AK4Qdrwt51ZqExKbQpTUNn+EjqoTwvqNj4kqx5QUCI0ThS/YkOxJCXmPUWZbhjpCg56i+2aB6CmK2JGhn57K5mj0MNdBXA4/WnwH6XoPWJzK5Nyu2zB3nAZp+S5hpQs+p1vN1/wsjk=

        github.com ecdsa-sha2-nistp256
        AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBEmKSENjQEezOmxkZMy7opKgwFB9nkt5YRrYMjNuG5N87uRgg6CLrbo5wAdT/y6v0mKV0U2w0WZ2YB/++Tpockg=

        github.com ssh-ed25519
        AAAAC3NzaC1lZDI1NTE5AAAAIOMqqnkVzrm0SdG6UOoqKLsabgH5C9okWi0dh2l9GKJl

        github.com ssh-rsa
        AAAAB3NzaC1yc2EAAAADAQABAAABgQCj7ndNxQowgcQnjshcLrqPEiiphnt+VTTvDP6mHBL9j1aNUkY4Ue1gvwnGLVlOhGeYrnZaMgRK6+PKCUXaDbC7qtbW8gIkhL7aGCsOr/C56SJMy/BCZfxd1nWzAOxSDPgVsmerOBYfNqltV9/hWCqBywINIR+5dIg6JTJ72pcEpEjcYgXkE2YEFXV1JHnsKgbLWNlhScqb2UmyRkQyytRLtL+38TGxkxCflmO+5Z8CSSNY7GidjMIZ7Q4zMjA2n1nGrlTDkzwDCsw+wqFPGQA179cnfGWOWRVruj16z6XyvxvjJwbz0wQZ75XK5tKSb7FNyeIEs4TT4jk+S4dhPeAUC5y+bDYirYgM4GC7uEnztnZyaVWQ7B381AK4Qdrwt51ZqExKbQpTUNn+EjqoTwvqNj4kqx5QUCI0ThS/YkOxJCXmPUWZbhjpCg56i+2aB6CmK2JGhn57K5mj0MNdBXA4/WnwH6XoPWJzK5Nyu2zB3nAZp+S5hpQs+p1vN1/wsjk=
  - |
    apiVersion: v1
    kind: Secret
    metadata:
      name: argocd-secret
      labels:
        app.kubernetes.io/name: argocd-secret
        app.kubernetes.io/part-of: argocd
    type: Opaque
    data:
      admin.password: null
      admin.passwordMtime: null
