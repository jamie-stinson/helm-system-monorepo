namespace: "argocd"
installCRDs: true

workload:
  image:
    registry: quay.io
    repository: argoproj/argocd
    tag: v3.0.3
    digest: "sha256:204287a6b59982127c03f8c4b5e748ad843fdb7b14d28c08796846c35f097bce"
  command:
    - 'argocd-server'
  args:
    - '--port=8080'
    - '--metrics-port=8083'
  envs:
    - name: ARGOCD_SERVER_NAME
      value: argocd-server
  probes:
    readinessProbe:
      path: "/healthz"
      port: 8080
    livenessProbe:
      path: "/healthz?full=true"
      port: 8080
  storage:
    - name: tmp
      type: emptyDir
      mountPath: /tmp
      ramDisk: false
      readOnly: false
  envsConfigMap:
    - name: ARGOCD_SERVER_INSECURE
      configMap: argocd-cmd-params-cm
      key: server.insecure
    - name: ARGOCD_SERVER_BASEHREF
      configMap: argocd-cmd-params-cm
      key: server.basehref
    - name: ARGOCD_SERVER_ROOTPATH
      configMap: argocd-cmd-params-cm
      key: server.rootpath
    - name: ARGOCD_SERVER_LOGFORMAT
      configMap: argocd-cmd-params-cm
      key: server.log.format
    - name: ARGOCD_SERVER_LOG_LEVEL
      configMap: argocd-cmd-params-cm
      key: server.log.level
    - name: ARGOCD_SERVER_REPO_SERVER
      configMap: argocd-cmd-params-cm
      key: repo.server
    - name: ARGOCD_SERVER_DEX_SERVER
      configMap: argocd-cmd-params-cm
      key: server.dex.server
    - name: ARGOCD_SERVER_DISABLE_AUTH
      configMap: argocd-cmd-params-cm
      key: server.disable.auth
    - name: ARGOCD_SERVER_ENABLE_GZIP
      configMap: argocd-cmd-params-cm
      key: server.enable.gzip
    - name: ARGOCD_SERVER_X_FRAME_OPTIONS
      configMap: argocd-cmd-params-cm
      key: server.x.frame.options
    - name: ARGOCD_SERVER_REPO_SERVER_STRICT_TLS
      configMap: argocd-cmd-params-cm
      key: server.repo.server.strict.tls
    - name: ARGOCD_SERVER_DEX_SERVER_STRICT_TLS
      configMap: argocd-cmd-params-cm
      key: server.dex.server.strict.tls
    - name: ARGOCD_SERVER_STATIC_ASSETS
      configMap: argocd-cmd-params-cm
      key: server.staticassets
    - name: REDIS_SERVER
      configMap: argocd-cmd-params-cm
      key: redis.server
    - name: ARGOCD_SERVER_OTLP_ADDRESS
      configMap: argocd-cmd-params-cm
      key: otlp.address
    - name: ARGOCD_APPLICATION_NAMESPACES
      configMap: argocd-cmd-params-cm
      key: application.namespaces
    - name: ARGOCD_SERVER_ENABLE_PROXY_EXTENSION
      configMap: argocd-cmd-params-cm
      key: server.enable.proxy.extension
    - name: ARGOCD_APPLICATIONSET_CONTROLLER_ENABLE_LEADER_ELECTION
      configMap: argocd-cmd-params-cm
      key: applicationsetcontroller.enable.leader.election
    - name: ARGOCD_APPLICATIONSET_CONTROLLER_ENABLE_PROGRESSIVE_SYNCS
      configMap: argocd-cmd-params-cm
      key: applicationsetcontroller.enable.progressive.syncs
    - name: ARGOCD_APPLICATIONSET_CONTROLLER_LOGFORMAT
      configMap: argocd-cmd-params-cm
      key: applicationsetcontroller.log.format
    - name: ARGOCD_APPLICATIONSET_CONTROLLER_LOG_LEVEL
      configMap: argocd-cmd-params-cm
      key: applicationsetcontroller.log.level
    - name: ARGOCD_APPLICATIONSET_CONTROLLER_NAMESPACES
      configMap: argocd-cmd-params-cm
      key: applicationsetcontroller.namespaces
    - name: ARGOCD_APPLICATIONSET_CONTROLLER_POLICY
      configMap: argocd-cmd-params-cm
      key: applicationsetcontroller.policy
    - name: ARGOCD_CONTROLLER_IGNORE_NORMALIZER_JQ_TIMEOUT
      configMap: argocd-cmd-params-cm
      key: controller.ignore.normalizer.jq.timeout
    - name: ARGOCD_CONTROLLER_LOGFORMAT
      configMap: argocd-cmd-params-cm
      key: controller.log.format
    - name: ARGOCD_CONTROLLER_LOG_LEVEL
      configMap: argocd-cmd-params-cm
      key: controller.log.level
    - name: ARGOCD_CONTROLLER_OPERATION_PROCESSORS
      configMap: argocd-cmd-params-cm
      key: controller.operation.processors
    - name: ARGOCD_CONTROLLER_REPO_SERVER_TIMEOUT_SECONDS
      configMap: argocd-cmd-params-cm
      key: controller.repo.server.timeout.seconds
    - name: ARGOCD_CONTROLLER_SELF_HEAL_TIMEOUT_SECONDS
      configMap: argocd-cmd-params-cm
      key: controller.self.heal.timeout.seconds
    - name: ARGOCD_CONTROLLER_STATUS_PROCESSORS
      configMap: argocd-cmd-params-cm
      key: controller.status.processors
    - name: ARGOCD_CONTROLLER_SYNC_TIMEOUT_SECONDS
      configMap: argocd-cmd-params-cm
      key: controller.sync.timeout.seconds
    - name: ARGOCD_DEXSERVER_LOGFORMAT
      configMap: argocd-cmd-params-cm
      key: dexserver.log.format
    - name: ARGOCD_DEXSERVER_LOG_LEVEL
      configMap: argocd-cmd-params-cm
      key: dexserver.log.level
    - name: ARGOCD_NOTIFICATIONS_CONTROLLER_LOGFORMAT
      configMap: argocd-cmd-params-cm
      key: notificationscontroller.log.format
    - name: ARGOCD_NOTIFICATIONS_CONTROLLER_LOG_LEVEL
      configMap: argocd-cmd-params-cm
      key: notificationscontroller.log.level
    - name: ARGOCD_REPOSERVER_LOGFORMAT
      configMap: argocd-cmd-params-cm
      key: reposerver.log.format
    - name: ARGOCD_REPOSERVER_LOG_LEVEL
      configMap: argocd-cmd-params-cm
      key: reposerver.log.level
    - name: ARGOCD_REPOSERVER_PARALLELISM_LIMIT
      configMap: argocd-cmd-params-cm
      key: reposerver.parallelism.limit

configMap:
  enabled: true
  configMaps:
    - name: "argocd-cmd-params-cm"
      data:
        application.namespaces: ""
        applicationsetcontroller.enable.leader.election: "true"
        applicationsetcontroller.enable.progressive.syncs: "false"
        applicationsetcontroller.log.format: "text"
        applicationsetcontroller.log.level: "info"
        applicationsetcontroller.namespaces: ""
        applicationsetcontroller.policy: "sync"
        controller.ignore.normalizer.jq.timeout: "1s"
        controller.log.format: "text"
        controller.log.level: "info"
        controller.operation.processors: "10"
        controller.repo.server.timeout.seconds: "60"
        controller.self.heal.timeout.seconds: "5"
        controller.status.processors: "20"
        controller.sync.timeout.seconds: "0"
        dexserver.log.format: "text"
        dexserver.log.level: "info"
        notificationscontroller.log.format: "text"
        notificationscontroller.log.level: "info"
        otlp.address: ""
        redis.server: "argocd-redis:6379"
        repo.server: "argocd-repo-server:8081"
        reposerver.log.format: "text"
        reposerver.log.level: "info"
        reposerver.parallelism.limit: "0"
        server.basehref: "/"
        server.dex.server: "https://argocd-dex.argocd.svc.cluster.local:5556"
        server.dex.server.strict.tls: "false"
        server.disable.auth: "false"
        server.enable.gzip: "true"
        server.enable.proxy.extension: "false"
        server.insecure: "true"
        server.log.format: "text"
        server.log.level: "info"
        server.repo.server.strict.tls: "false"
        server.rootpath: ""
        server.staticassets: "/shared/app"
        server.x.frame.options: "sameorigin"

service:
  ports:
    - name: http
      port: 8080
      protocol: TCP
    - name: http-metrics
      port: 8083
      protocol: TCP

rbac:
  enabled: true
  roles:
    role:
      rules:
        - apiGroups:
            - ''
          resources:
            - secrets
            - configmaps
          verbs:
            - create
            - get
            - list
            - watch
            - update
            - patch
            - delete
        - apiGroups:
            - argoproj.io
          resources:
            - applications
            - applicationsets
            - appprojects
          verbs:
            - create
            - get
            - list
            - watch
            - update
            - delete
            - patch
        - apiGroups:
            - ''
          resources:
            - events
          verbs:
            - create
            - list
    clusterRole:
      rules:
        - apiGroups:
            - '*'
          resources:
            - '*'
          verbs:
            - delete
            - get
            - patch
        - apiGroups:
            - ''
          resources:
            - events
          verbs:
            - list
            - create
        - apiGroups:
            - ''
          resources:
            - pods
            - pods/log
          verbs:
            - get
        - apiGroups:
            - argoproj.io
          resources:
            - applications
            - applicationsets
          verbs:
            - get
            - list
            - update
            - watch
        - apiGroups:
            - batch
          resources:
            - jobs
          verbs:
            - create
        - apiGroups:
            - argoproj.io
          resources:
            - workflows
          verbs:
            - create

ingress:
  enabled: true
  annotations:
    traefik.ingress.kubernetes.io/router.entrypoints: "internalweb, internalwebsecure"
  hosts:
    - host: argocd.projectwhitebox.com
      path: /
      pathType: "Prefix"
      tls:
        enabled: false
      backend:
        service:
          name: "argocd-server"
          port: 8080

grafana:
  dashboard:
    enabled: true
    dashboards:
      - name: argocd-application-overview
        title: "ArgoCD / Application / Overview"
        url: "https://raw.githubusercontent.com/jamie-stinson/helm-system-monorepo/refs/heads/main/charts/argocd-server/dashboards/argocd-application-overview.json"
        folder: "System"
      - name: argocd-operational-overview
        title: "ArgoCD / Operational / Overview"
        url: "https://raw.githubusercontent.com/jamie-stinson/helm-system-monorepo/refs/heads/main/charts/argocd-server/dashboards/argocd-application-overview.json"
        folder: "System"

extraObjects:
  - |
    apiVersion: v1
    kind: ConfigMap
    metadata:
      name: argocd-cm
      labels:
        app.kubernetes.io/name: argocd-cm
        app.kubernetes.io/part-of: argocd
    data:
      url: https://argocd.projectwhitebox.com:30443

      oidc.config: |
        name: GitHub
        issuer: https://github.com/login/oauth
        clientID: Ov23li7VGI4N6AGCt8O1
        clientSecret: $argocd:dex.github.clientSecret
        requestedScopes: ["openid", "profile", "email", "read:org"]
        orgs:
          - jamie-stinson-org

      admin.enabled: 'true'
      users.anonymous.enabled: "true"
      application.instanceLabelKey: argocd.argoproj.io/instance
      application.sync.impersonation.enabled: 'false'
      exec.enabled: 'false'
      resource.customizations.ignoreResourceUpdates.ConfigMap: |
        jqPathExpressions:
          # Ignore the cluster-autoscaler status
          - '.metadata.annotations."cluster-autoscaler.kubernetes.io/last-updated"'
          # Ignore the annotation of the legacy Leases election
          - '.metadata.annotations."control-plane.alpha.kubernetes.io/leader"'
      resource.customizations.ignoreResourceUpdates.Endpoints: |
        jsonPointers:
          - /metadata
          - /subsets
      resource.customizations.ignoreResourceUpdates.all: |
        jsonPointers:
          - /status
      resource.customizations.ignoreResourceUpdates.apps_ReplicaSet: |
        jqPathExpressions:
          - '.metadata.annotations."deployment.kubernetes.io/desired-replicas"'
          - '.metadata.annotations."deployment.kubernetes.io/max-replicas"'
          - '.metadata.annotations."rollout.argoproj.io/desired-replicas"'
      resource.customizations.ignoreResourceUpdates.argoproj.io_Application: |
        jqPathExpressions:
          - '.metadata.annotations."notified.notifications.argoproj.io"'
          - '.metadata.annotations."argocd.argoproj.io/refresh"'
          - '.metadata.annotations."argocd.argoproj.io/hydrate"'
          - '.operation'
      resource.customizations.ignoreResourceUpdates.argoproj.io_Rollout: |
        jqPathExpressions:
          - '.metadata.annotations."notified.notifications.argoproj.io"'
      resource.customizations.ignoreResourceUpdates.autoscaling_HorizontalPodAutoscaler: |
        jqPathExpressions:
          - '.metadata.annotations."autoscaling.alpha.kubernetes.io/behavior"'
          - '.metadata.annotations."autoscaling.alpha.kubernetes.io/conditions"'
          - '.metadata.annotations."autoscaling.alpha.kubernetes.io/metrics"'
          - '.metadata.annotations."autoscaling.alpha.kubernetes.io/current-metrics"'
      resource.customizations.ignoreResourceUpdates.discovery.k8s.io_EndpointSlice: |
        jsonPointers:
          - /metadata
          - /endpoints
          - /ports
      resource.exclusions: >
        ### Network resources created by the Kubernetes control plane and excluded
        to reduce the number of watched events and UI clutter

        - apiGroups:
          - ''
          - discovery.k8s.io
          kinds:
          - Endpoints
          - EndpointSlice
        ### Internal Kubernetes resources excluded reduce the number of watched
        events

        - apiGroups:
          - coordination.k8s.io
          kinds:
          - Lease
        ### Internal Kubernetes Authz/Authn resources excluded reduce the number of
        watched events

        - apiGroups:
          - authentication.k8s.io
          - authorization.k8s.io
          kinds:
          - SelfSubjectReview
          - TokenReview
          - LocalSubjectAccessReview
          - SelfSubjectAccessReview
          - SelfSubjectRulesReview
          - SubjectAccessReview
        ### Intermediate Certificate Request excluded reduce the number of watched
        events

        - apiGroups:
          - certificates.k8s.io
          kinds:
          - CertificateSigningRequest
        - apiGroups:
          - cert-manager.io
          kinds:
          - CertificateRequest
        ### Cilium internal resources excluded reduce the number of watched events
        and UI Clutter

        - apiGroups:
          - cilium.io
          kinds:
          - CiliumIdentity
          - CiliumEndpoint
          - CiliumEndpointSlice
        ### Kyverno intermediate and reporting resources excluded reduce the number
        of watched events and improve performance

        - apiGroups:
          - kyverno.io
          - reports.kyverno.io
          - wgpolicyk8s.io
          kinds:
          - PolicyReport
          - ClusterPolicyReport
          - EphemeralReport
          - ClusterEphemeralReport
          - AdmissionReport
          - ClusterAdmissionReport
          - BackgroundScanReport
          - ClusterBackgroundScanReport
          - UpdateRequest
      resource.customizations: |
        networking.k8s.io/Ingress:
          health.lua: |
            hs = {}
            hs.status = "Healthy"
            return hs
      server.rbac.log.enforce.enable: 'false'
      statusbadge.enabled: 'false'
      timeout.hard.reconciliation: 0s
      timeout.reconciliation: 180s
  - |
    apiVersion: v1
    kind: ConfigMap
    metadata:
      name: argocd-rbac-cm
      labels:
        app.kubernetes.io/name: argocd-rbac-cm
        app.kubernetes.io/part-of: argocd
    data:
      policy.default: role:admin
      policy.matchMode: glob
      scopes: '[groups, email]'
      policy.csv: |
        g, jamie-stinson-org, role:admin
  - |
    apiVersion: v1
    kind: ConfigMap
    metadata:
      name: argocd-ssh-known-hosts-cm
      labels:
        app.kubernetes.io/name: argocd-ssh-known-hosts-cm
        app.kubernetes.io/part-of: argocd
    data:
      ssh_known_hosts: >
        [ssh.github.com]:443 ecdsa-sha2-nistp256
        AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBEmKSENjQEezOmxkZMy7opKgwFB9nkt5YRrYMjNuG5N87uRgg6CLrbo5wAdT/y6v0mKV0U2w0WZ2YB/++Tpockg=

        [ssh.github.com]:443 ssh-ed25519
        AAAAC3NzaC1lZDI1NTE5AAAAIOMqqnkVzrm0SdG6UOoqKLsabgH5C9okWi0dh2l9GKJl

        [ssh.github.com]:443 ssh-rsa
        AAAAB3NzaC1yc2EAAAADAQABAAABgQCj7ndNxQowgcQnjshcLrqPEiiphnt+VTTvDP6mHBL9j1aNUkY4Ue1gvwnGLVlOhGeYrnZaMgRK6+PKCUXaDbC7qtbW8gIkhL7aGCsOr/C56SJMy/BCZfxd1nWzAOxSDPgVsmerOBYfNqltV9/hWCqBywINIR+5dIg6JTJ72pcEpEjcYgXkE2YEFXV1JHnsKgbLWNlhScqb2UmyRkQyytRLtL+38TGxkxCflmO+5Z8CSSNY7GidjMIZ7Q4zMjA2n1nGrlTDkzwDCsw+wqFPGQA179cnfGWOWRVruj16z6XyvxvjJwbz0wQZ75XK5tKSb7FNyeIEs4TT4jk+S4dhPeAUC5y+bDYirYgM4GC7uEnztnZyaVWQ7B381AK4Qdrwt51ZqExKbQpTUNn+EjqoTwvqNj4kqx5QUCI0ThS/YkOxJCXmPUWZbhjpCg56i+2aB6CmK2JGhn57K5mj0MNdBXA4/WnwH6XoPWJzK5Nyu2zB3nAZp+S5hpQs+p1vN1/wsjk=

        github.com ecdsa-sha2-nistp256
        AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBEmKSENjQEezOmxkZMy7opKgwFB9nkt5YRrYMjNuG5N87uRgg6CLrbo5wAdT/y6v0mKV0U2w0WZ2YB/++Tpockg=

        github.com ssh-ed25519
        AAAAC3NzaC1lZDI1NTE5AAAAIOMqqnkVzrm0SdG6UOoqKLsabgH5C9okWi0dh2l9GKJl

        github.com ssh-rsa
        AAAAB3NzaC1yc2EAAAADAQABAAABgQCj7ndNxQowgcQnjshcLrqPEiiphnt+VTTvDP6mHBL9j1aNUkY4Ue1gvwnGLVlOhGeYrnZaMgRK6+PKCUXaDbC7qtbW8gIkhL7aGCsOr/C56SJMy/BCZfxd1nWzAOxSDPgVsmerOBYfNqltV9/hWCqBywINIR+5dIg6JTJ72pcEpEjcYgXkE2YEFXV1JHnsKgbLWNlhScqb2UmyRkQyytRLtL+38TGxkxCflmO+5Z8CSSNY7GidjMIZ7Q4zMjA2n1nGrlTDkzwDCsw+wqFPGQA179cnfGWOWRVruj16z6XyvxvjJwbz0wQZ75XK5tKSb7FNyeIEs4TT4jk+S4dhPeAUC5y+bDYirYgM4GC7uEnztnZyaVWQ7B381AK4Qdrwt51ZqExKbQpTUNn+EjqoTwvqNj4kqx5QUCI0ThS/YkOxJCXmPUWZbhjpCg56i+2aB6CmK2JGhn57K5mj0MNdBXA4/WnwH6XoPWJzK5Nyu2zB3nAZp+S5hpQs+p1vN1/wsjk=
  - |
    apiVersion: v1
    kind: Secret
    metadata:
      name: argocd-secret
      labels:
        app.kubernetes.io/name: argocd-secret
        app.kubernetes.io/part-of: argocd
    type: Opaque
    data:
      admin.password: null
      admin.passwordMtime: null
